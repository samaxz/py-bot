import sqlalchemy
import telebot
from sqlalchemy import MetaData, Table, Column, Integer, String, select

from constants import postg_name, postg_pass, bot_token

DB_URL = f'postgresql://{postg_name}:{postg_pass}@localhost:5432/net_lab_checker'
engine = sqlalchemy.create_engine(DB_URL, echo=True)
meta = MetaData()

phones = Table('phones', meta, Column('id', Integer, primary_key=True), Column('phone', String), )
emails = Table('emails', meta, Column('id', Integer, primary_key=True), Column('email', String), )

connection = engine.connect()

bot = telebot.TeleBot(f'{bot_token}')


@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.from_user.id,
                     f"–≠—Ç–æ—Ç –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ email. –ò—Å–ø–æ–ª—å–∑—É–π {'/check_phone'}, {'/ check_email'} –∏–ª–∏ {'/check_password'}, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å")


@bot.message_handler(commands=['check_phone'])
def on_check_phone(message):
    bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    bot.register_next_step_handler(message, on_enter_phone)


@bot.message_handler(commands=['enter_phone'])
def on_enter_phone(message):
    selected_phone = phones.select().where(phones.c.phone == message.text.strip())
    result = connection.execute(selected_phone)

    if result.first() is not None:
        print('phone has been found')
        bot.send_message(message.from_user.id, '–î–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ë–î üòÄ')
    else:
        print('phone is absent')
        bot.send_message(message.from_user.id, '–î–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ë–î ‚òπÔ∏è')


@bot.message_handler(commands=['check_email'])
def on_check_phone(message):
    bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏ email")
    bot.register_next_step_handler(message, on_enter_email)


@bot.message_handler(commands=['enter_email'])
def on_enter_email(message):
    selected_email = emails.select().where(emails.c.email == message.text.strip())
    result = connection.execute(selected_email)

    if result.first() is not None:
        print('email has been found')
        bot.send_message(message.from_user.id, '–î–∞–Ω–Ω—ã–π email –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ë–î üòÄ')
    else:
        print('email is absent')
        bot.send_message(message.from_user.id, '–î–∞–Ω–Ω—ã–π email –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ë–î ‚òπÔ∏è')


@bot.message_handler(commands=['check_password'])
def on_check_password(message):
    bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å")
    bot.register_next_step_handler(message, on_enter_password)


@bot.message_handler(commands=['enter_password'])
def on_enter_password(message):
    digits = '1234567890'
    upper_letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    lower_letters = 'abcdefghijklmnopqrstuvwxyz'
    symbols = '!@#$%^&*()-+'
    acceptable = digits + upper_letters + lower_letters + symbols
    password = message.text.strip()
    passwd = set(password)

    if any(char not in acceptable for char in passwd):
        bot.send_message(message.from_user.id, '–£—É–ø—Å, –±—ã–ª –≤–≤–µ–¥—ë–Ω –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª - –≤–≤–µ–¥–∏ –¥—Ä—É–≥–æ–π –ø–∞—Ä–æ–ª—å')
        bot.register_next_step_handler(message, on_enter_password)
    else:
        recommendations = []
        if len(password) < 8:
            recommendations.append(f'—É–≤–µ–ª–∏—á–∏—Ç—å —á–∏—Å–ª–æ —Å–∏–º–≤–æ–ª–æ–≤ - {12 - len(password)}')
            bot.send_message(message.from_user.id, '–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–∞—Ä–æ–ª—å, –ø–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π')
            bot.register_next_step_handler(message, on_enter_password)
            return

        for what, errMessage in ((digits, '—Ü–∏—Ñ—Ä—É'),
                                 (symbols, '—Å–ø–µ—Ü—Å–∏–º–≤–æ–ª'),
                                 (upper_letters, '–∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É'),
                                 (lower_letters, '—Å—Ç—Ä–æ—á–Ω—É—é –±—É–∫–≤—É')):
            if all(char not in what for char in passwd):
                recommendations.append(f'–î–æ–±–∞–≤—å 1 {errMessage}')

        if recommendations:
            bot.send_message(message.from_user.id, f"–°–ª–∞–±—ã–π –ø–∞—Ä–æ–ª—å. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            for recommendation in recommendations:
                bot.send_message(message.from_user.id, f"{recommendation}")

        else:
            bot.send_message(message.from_user.id, '–•–æ—Ä–æ—à–∏–π –ø–∞—Ä–æ–ª—å, nice job')


@bot.message_handler(content_types=['text'])
def handle_text(message):
    if (message.text != '/check_phone') or (message.text != '/check_email'):
        bot.send_message(message.from_user.id,
                         f"–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π {'/check_phone'}, {'/check_email'} –∏–ª–∏ {'/check_password'}")


bot.infinity_polling()
