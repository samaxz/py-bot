import sqlalchemy
import telebot
from sqlalchemy import MetaData, Table, Column, Integer, String, select

from constants import postg_name, postg_pass, bot_token

DB_URL = f'postgresql://{postg_name}:{postg_pass}@localhost:5432/net_lab_checker'
engine = sqlalchemy.create_engine(DB_URL, echo=True)
meta = MetaData()

phones = Table('phones', meta, Column('id', Integer, primary_key=True), Column('phone', String), )
emails = Table('emails', meta, Column('id', Integer, primary_key=True), Column('email', String), )

bot = telebot.TeleBot(f'{bot_token}')

new_message = ''


@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.from_user.id,
                     "–≠—Ç–æ—Ç –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ email. –ù–∞–ø–∏—à–∏ /check_phone –∏–ª–∏ /check_email —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å")


@bot.message_handler(commands=['enter_phone'])
def on_enter_phone(message):
    # bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    # if not message.text.strip():
    #     bot.send_message(message.from_user.id, "–ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    # else:
    #     bot.register_next_step_handler(message, on_check_phone)
    selected_phone = phones.select().where(phones.c.phone == message.text)
    # selected_phone = phones.select().where(phones.c.phone == new_message)
    connection = engine.connect()
    result = connection.execute(selected_phone)

    if result.first() is not None:
        print('phone has been found')
        bot.send_message(message.from_user.id, '–î–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ë–î üòÄ')
    else:
        print('phone is absent')
        bot.send_message(message.from_user.id, '–î–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ë–î ‚òπÔ∏è')


@bot.message_handler(commands=['check_phone'])
def on_check_phone(message):
    bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    bot.register_next_step_handler(message, on_enter_phone)
    # if not message.text.strip():
    # 	bot.send_message(message.from_user.id,
    # 					 "–ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    #  message.text.strip():
    # global new_message
    # new_message = message.text
    # selected_phone = phones.select().where(phones.c.phone == message.text)
    # # selected_phone = phones.select().where(phones.c.phone == new_message)
    # connection = engine.connect()
    # result = connection.execute(selected_phone)
    #
    # if result.first() is not None:
    #     print('phone has been found')
    #     bot.send_message(message.from_user.id, '–î–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ë–î')
    # else:
    #     print('phone is absent')
    #     bot.send_message(message.from_user.id, '–î–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ë–î')


# @bot.message_handler(func=lambda message: True)
# def echo_all(message):
# 	bot.send_message(message.from_user.id, '–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π /check_phone –∏–ª–∏ /check_email')
@bot.message_handler(content_types=['text'])
def handle_text(message):
    if (message.text != '/check_phone') or (message.text != '/check_email'):
        bot.send_message(message.from_user.id, "–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π /check_phone –∏–ª–∏ /check_email")
    elif message.text == '/check_phone':
        # bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        # new_message = message.text
        bot.register_next_step_handler(message, on_enter_phone)


# elif message.text == '/check_email':
# bot.register_next_step_handler(message, on_email_check)
# elif not message.text.strip():
# 	bot.send_message(message.from_user.id, "–ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
# elif message.text is '/check_phone':
# selected_phone = phones.select().where(phones.c.phone == message.text)
# connection = engine.connect()
# result = connection.execute(selected_phone)
#
# if result.first() is not None:
# 	print('nayden')
# 	bot.reply_to(message, '–î–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ë–î')
# else:
# 	print('absent')
# 	bot.reply_to(message, '–î–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ë–î')

# elif message.text == "/check_phone":
# 	bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å")
# else:
# 	bot.send_message(message.from_user.id, "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ù–∞–ø–∏—à–∏ /help.")

# bot.send_message(message.from_user.id, '–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π /check_phone –∏–ª–∏ /check_email')


bot.infinity_polling()
